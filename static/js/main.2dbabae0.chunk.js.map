{"version":3,"sources":["ui/task sync /^/.//task/-.*/.png$","ui/task/task-kings.png","ui/task/task-time.png","ui/task/task-tournaments.png","ui/progress-bar/progress-bar.jsx","ui/task/task.jsx","ui/timer/timer.jsx","ui/spinner/spinner.jsx","app.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ProgressBar","props","className","style","width","progress","Task","src","require","type","alt","time","kings","tournaments","onClick","onButtonClick","Timer","tick","date","state","days","diff","moment","hours","minutes","hoursToDay","seconds","setState","this","timerID","setInterval","clearInterval","React","Component","Spinner","App","showShirt","onLoad","onError","data","fetch","then","response","ok","json","catch","console","log","endsAt","tasks","slice","task","key","Date","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dbabae0.chunk.js","sourcesContent":["var map = {\n\t\"./task-kings.png\": 19,\n\t\"./task-time.png\": 20,\n\t\"./task-tournaments.png\": 21\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/task-kings.159c96d7.png\";","module.exports = __webpack_public_path__ + \"static/media/task-time.94ef6c8d.png\";","module.exports = __webpack_public_path__ + \"static/media/task-tournaments.935c7e99.png\";","import React from 'react';\n\nimport './progress-bar.scss';\n\nexport default function ProgressBar(props) {\n  return (\n    <div className=\"progress-bar\">\n      <div className=\"progress-bar__load\" style={{width: props.progress + '%'}}></div>\n    </div> \n  )\n}","import React from 'react';\n\nimport './task.scss';\nimport ProgressBar from '../progress-bar/progress-bar';\n\nexport default function Task(props) {\n  const desc = {\n    time: \"Выйграть три игры, каждую менее чем за 3 минуты\",\n    kings: \"Выйграть три игры, разложив всех королей\",\n    tournaments: \"Выйграть пять турниров подряд\",\n  }\n\n  return (\n    <div className=\"task\">\n      <div className=\"task__avatar\">\n        <img className=\"avatar\" src={require(`./task-${props.type}.png`)} alt=\"avatar\"/>\n      </div>\n      <div className=\"task__descreption\">\n        <div className=\"descreption\">\n          {desc[props.type]}\n        </div>\n        <ProgressBar \n          progress = { props.progress }\n        />\n      </div>\n      {props.progress === 100 ? (\n        <div className=\"task__button\">\n          <button\n            className=\"button\"\n            onClick = { props.onButtonClick }\n          >Поставить рубашку</button>\n        </div>)\n       : null}\n    </div>\n  )\n}","import React from 'react';\nimport moment from 'moment';\n\nimport './timer.scss';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: null,\n    }\n  }\n\n  componentDidMount() {\n    this.setState({date: moment(this.props.date)}, this.tick);\n\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick = () => {\n    const hoursToDay = 24;\n    const minutesToHour = 60;\n    const secondsToMinute = 60;\n\n    const { date } = this.state;\n\n    const days = date.diff(moment(), 'days');\n    const hours = date.diff(moment(), 'hours')\n      - hoursToDay * days;\n    const minutes = date.diff(moment(), 'minutes')\n      - (hoursToDay * minutesToHour * days + hours * minutesToHour);\n    const seconds = date.diff(moment(), 'seconds')\n      - (hoursToDay * minutesToHour * secondsToMinute * days + hours * minutesToHour * secondsToMinute + secondsToMinute * minutes);\n\n    this.setState({\n      days,\n      hours,\n      minutes,\n      seconds\n    })\n  }\n\n  render() {\n    const { date, days, hours, minutes, seconds } = this.state\n    if (!date) return null;\n    return (\n      <div className=\"timer header__timer\">\n        <div className=\"timer__column\">\n          <span className=\"timer__number\">{days}</span>\n          <span className=\"timer__sign\">дней</span>\n        </div>\n        <div className=\"timer__column\">\n          <span className=\"timer__split\">:</span>\n        </div>\n        <div className=\"timer__column\">\n          <span className=\"timer__number\">{hours}</span>\n          <span className=\"timer__sign\">часов</span>\n        </div>\n        <div className=\"timer__column\">\n          <span className=\"timer__split\">:</span>\n        </div>\n        <div className=\"timer__column\">\n          <span className=\"timer__number\">{minutes}</span>\n          <span className=\"timer__sign\">минут</span>\n        </div>\n        <div className=\"timer__column\">\n          <span className=\"timer__split\">:</span>\n        </div>\n        <div className=\"timer__column\">\n          <span className=\"timer__number\">{seconds}</span>\n          <span className=\"timer__sign\">секунд</span>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport './spinner.scss';\n\nexport default function Spinner(props) {\n  return (\n    <div className=\"spinner\"></div>\n  )\n}","import React from 'react';\nimport './app.scss';\n\nimport Task from './ui/task/task';\nimport Timer from './ui/timer/timer';\nimport Spinner from './ui/spinner/spinner';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showShirt: false,\n      onLoad: true,\n      onError: false,\n      data: {},\n    }\n  }\n\n  showShirt = () => {\n    this.setState({showShirt: true});\n  }\n\n  componentDidMount() {\n    this.setState({onLoad: true});\n    fetch(\"http://sol-tst.herokuapp.com/api/v1/tasks/\")\n      .then(response => {\n        if (!response.ok) {\n          this.setState({onLoad: false, onError: true });\n          throw new Error(\"Error load data\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({\n          onLoad: false,\n          data: data,\n        })\n      })\n      .catch((e) => {console.log(e)})\n  }\n\n  render() {\n    const { showShirt, onLoad, onError, data } = this.state;\n    if ( showShirt || onError ) return <div className=\"app\"></div>;\n\n    if (onLoad || !data) return (\n      <div className=\"app\">\n        <header className=\"header\">\n        </header>\n        <main className=\"main\">\n          <Spinner />\n        </main>\n      </div>\n    )\n\n    return (\n      <div className=\"app\">\n        <header className=\"header\">\n          <Timer\n            date = {data.endsAt}\n          />\n        </header>\n        <main className=\"main\">\n          {data.tasks.slice(0, 3).map(task => {\n            return <Task\n            key = { `${task.type} ${new Date()}`}\n            type = { task.type }\n            progress = { task.progress }\n            onButtonClick = { this.showShirt }\n          />\n          })}\n        </main>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}